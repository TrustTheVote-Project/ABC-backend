AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  ABC back end

Parameters:
  environment:
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
    Handler: app.lambdaHandler
    Runtime: nodejs12.x
    Environment:
      Variables:
        DEPLOYMENT_ENVIRONMENT: !Sub "${environment}"
        VOTERS_TABLE_NAME: !Sub "abc_voters_${environment}"
        VOTER_SESSIONS_TABLE_NAME: !Sub "abc_voter_sessions_${environment}"
        ELECTIONS_TABLE_NAME: !Sub "abc_elections_${environment}"
        ELECTIONS_DOCUMENT_BUCKET: !Sub "abc-documents-${environment}"
        AUTHORIZATION_FUNCTION: !Sub "AUTHORIZATION-FUNCTION-${environment}"
Resources:
  Documents:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "abc-documents-${environment}"

  Elections:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "abc_elections_${environment}"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "electionId"
          KeyType: "HASH"
      AttributeDefinitions:
        - AttributeName: "electionId"
          AttributeType: "S"

  # If we do this we may be better off using the API/lambda implementation for data population so that
  # insertion creates the necessary items in each of the lookup tables and we can keep that logic
  # in one place in the lib/Voter.js code.
  Voters:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "abc_voters_${environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: VIDN
          AttributeType: S
        - AttributeName: SSN
          AttributeType: S
        - AttributeName: "yearOfBirth"
          AttributeType: "S"
        - AttributeName: "lastName"
          AttributeType: "S"
        - AttributeName: "ZIP5"
          AttributeType: "S"
        - AttributeName: "SSNPlus"
          AttributeType: "S"
        - AttributeName: "AddressPlus"
          AttributeType: "S"
        - AttributeName: "DLNHashTruncated"
          AttributeType: "S"
        - AttributeName: "stateIDNHashTruncated"
          AttributeType: "S"
        - AttributeName: "SSN4HashPlus"
          AttributeType: "S"

      KeySchema:
        - AttributeName: VIDN
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "lastName-ZIP5-index"
          Projection:
            ProjectionType: "ALL"
          KeySchema:
            - KeyType: "HASH"
              AttributeName: "lastName"
            - KeyType: "RANGE"
              AttributeName: "ZIP5"

        - IndexName: "SSN-index"
          Projection:
            ProjectionType: "ALL"
          KeySchema:
            - KeyType: "HASH"
              AttributeName: "SSN"
        - IndexName: "DLN-index"
          Projection:
            ProjectionType: "ALL"
          KeySchema:
            - KeyType: "HASH"
              AttributeName: "DLNHashTruncated"
            - KeyType: "RANGE"
              AttributeName: "yearOfBirth"
        - IndexName: "stateIDN-index"
          Projection:
            ProjectionType: "ALL"
          KeySchema:
            - KeyType: "HASH"
              AttributeName: "stateIDNHashTruncated"
            - KeyType: "RANGE"
              AttributeName: "yearOfBirth"
        - IndexName: "SSNPlus-index"
          Projection:
            ProjectionType: "ALL"
          KeySchema:
            - KeyType: "HASH"
              AttributeName: "SSNPlus"
        - IndexName: "SSN4HashPlus-index"
          Projection:
            ProjectionType: "ALL"
          KeySchema:
            - KeyType: "HASH"
              AttributeName: "SSN4HashPlus"
        - IndexName: "AddressPlus-index"
          Projection:
            ProjectionType: "ALL"
          KeySchema:
            - KeyType: "HASH"
              AttributeName: "AddressPlus"
      Tags:
        - Key: BillingGroup
          Value: !Sub "abc_${environment}"

  VoterSessions:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "abc_voter_sessions_${environment}"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "VIDN"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "VIDN"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"

  # We'll also want a table for:
  # Ballots (I think can include both PDF urls/encoded data as well as metadata)
  # Elections
  # AffidavitTemplates
  # Logs (or just Errors?)
  # VoterEvents (signed up, requested ballot, incompleted ballot, completed ballot)
  # * use VIDN as hash key, event date as sort key? possibly 2ndary index on event type?

  AbcBackendApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "abc-backend__${environment}"
      StageName: !Sub "${environment}"
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin: "'*'"

      # TODO: Auth stuff is TBD
      Auth:
        DefaultAuthorizer: LambdaBasicAuth
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          LambdaBasicAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizationFunction.Arn
            AuthorizerPayloadFormatVersion: 2.0
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 0
      # GatewayResponses:
      #   UNAUTHORIZED:
      #     StatusCode: 401
      #     ResponseTemplates:
      #       "application/json": '{"message": "provide basic auth" }'
      #       "text/html": 'Unauthorized'
      #     ResponseParameters:
      #       Headers:
      #         WWW-Authenticate: "'Basic'"

  LibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: abc-backend-lambda-lib
      Description: Common code for ABC backend
      ContentUri: lib/
      CompatibleRuntimes:
        - nodejs12.x

  # TODO: Auth stuff is TBD
  # AuthFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: auth/
  #     Handler: app.handler
  #     Layers:
  #       - !Ref LibLayer

  # AdminIndexFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: admin/
  #     Handler: app.index
  #     Layers:
  #       - !Ref LibLayer
  #     Events:
  #       VotereadyApiGateway:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref VotereadyApiGateway
  #           Path: /admin
  #           Method: GET
  #           Auth:
  #             Authorizer: LambdaBasicAuth
  #     Policies:
  #       - DynamoDBCrudPolicy:
  #           TableName: !Sub "voteready_users_${environment}"

  getElectionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/getElection/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /getElection
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
        - S3FullAccessPolicy:
            BucketName: !Sub "abc-documents-${environment}"

  getConfigurationsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/getConfigurations/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /getConfigurations
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
  getElectionDefinitionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/getElectionDefinition/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /getElectionDefinition
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
  getAffidavitTemplateFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/getAffidavitTemplate/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /getAffidavitTemplate
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
        - S3FullAccessPolicy:
            BucketName: !Sub "abc-documents-${environment}"

  getTestPrintPageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/getTestPrintPage/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /getTestPrintPage
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
        - S3FullAccessPolicy:
            BucketName: !Sub "abc-documents-${environment}"

  getBlankBallotFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/getBlankBallot/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /getBlankBallot
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
        - S3FullAccessPolicy:
            BucketName: !Sub "abc-documents-${environment}"

  getBallotDefinitionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/getBallotDefinition/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /getBallotDefinition
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"

  lookupVoterByIDnumberFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/lookupVoterByIDnumber/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /lookupVoterByIDnumber
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"

  lookupVoterBySSN4Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/lookupVoterBySSN4/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /lookupVoterBySSN4
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"

  lookupVoterByAddressFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/lookupVoterByAddress/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /lookupVoterByAddress
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"

  lookupVoterEmailFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/lookupVoterEmail/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /lookupVoterEmail
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"

  postBeginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/postBegin/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /postBegin
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voter_sessions_${environment}"

  postCompleteFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/postComplete/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /postComplete
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voter_sessions_${environment}"

  postIncompleteFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/postIncomplete/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /postIncomplete
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voter_sessions_${environment}"

  setElectionAttributesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/setElectionAttributes/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /setElectionAttributes
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"

  setElectionConfigurationsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/setElectionConfigurations/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /setElectionConfigurations
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"

  submitElectionDefinitionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/submitElectionDefinition/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /submitElectionDefinition
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"
  setVotersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/setVoters/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /setVoters
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_voters_${environment}"

  setAffidavitTemplateFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/setAffidavitTemplate/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /setAffidavitTemplate
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"

  setBallotDefinitionsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/setBallotDefinitions/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /setBallotDefinitions
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"

  uploadBallotFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/uploadBallot/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /uploadBallot
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "abc_elections_${environment}"

  unknownEndpointFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: endpoints/unknownEndpoint/
      Layers:
        - !Ref LibLayer
      Events:
        AbcBackendApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref AbcBackendApiGateway
            Path: /{proxy+} # Any path not defined elsewhere
            Method: Any
            Auth:
              Authorizer: null
            

  AuthorizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorization/
      Layers:
        - !Ref LibLayer

#Outputs:
  # AuthFunction:
  #   Description: "Auth Function"
  #   Value: !GetAtt AuthFunction.Arn

Outputs:
  AuthorizationFunction:
    Description: Authorization Function for ABC API
    Value: !GetAtt AuthorizationFunction.Arn
    Export:
      Name: !Sub "AUTHORIZATION-FUNCTION-${environment}"


